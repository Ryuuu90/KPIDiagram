{"ast":null,"code":"var _jsxFileName = \"/Users/khalidabourkia/Desktop/diagram/client/src/components/KPIDiagram.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useMemo, useRef, useState, memo } from 'react';\nimport ReactFlow, { Background, Controls, useNodesState, useReactFlow, useEdgesState, Handle, Position } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport axios from 'axios';\n\n// CustomNode component\n// import { motion, AnimatePresence } from 'framer-motion';\nimport { motion } from 'framer-motion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomNode = /*#__PURE__*/memo(_c = ({\n  data\n}) => {\n  // console.log(data);\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0,\n      scale: 0.98\n    },\n    animate: {\n      opacity: 1,\n      scale: 1\n    },\n    exit: {\n      opacity: 0,\n      scale: 0.98\n    },\n    transition: {\n      duration: 0.2\n    },\n    style: {\n      backgroundColor: '#ffffff',\n      border: '1px solid #e5e7eb',\n      // gray-200\n      borderRadius: '12px',\n      padding: '16px',\n      width: 250,\n      boxShadow: '0px 1px 4px rgba(0, 0, 0, 0.05)',\n      fontFamily: 'Inter, sans-serif',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Handle, {\n      type: \"target\",\n      position: Position.Left,\n      style: {\n        opacity: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: 12,\n        fontWeight: 500,\n        color: '#2563eb',\n        marginBottom: 0\n      },\n      children: [\"nodeID : \", data.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: 12,\n        fontWeight: 500,\n        color: '#2563eb',\n        marginBottom: 4\n      },\n      children: [\"reportName : \", data.reportName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: 16,\n        color: '#374151'\n      },\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), data.hasChildren && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: data.onDrill,\n      style: {\n        position: 'absolute',\n        bottom: 8,\n        right: 8,\n        fontSize: 14,\n        border: 'none',\n        borderRadius: '4px',\n        background: '#e0e7ff',\n        color: '#1d4ed8',\n        cursor: 'pointer',\n        padding: '2px 6px'\n      },\n      children: data.expanded ? 'âˆ’' : `${data.childrenNum}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Handle, {\n      type: \"source\",\n      position: Position.Right,\n      style: {\n        opacity: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n});\n_c2 = CustomNode;\nconst defaultEdgeOptions = {\n  // animated: true,\n  type: 'smoothstep'\n};\nconst KPIDiagram = () => {\n  _s();\n  const [level, setLevel] = useState(0);\n  const newNodesRef = useRef([]);\n  const edgesRef = useRef([]);\n  const expandedNodesRef = useRef(new Set()); // Track expanded nodes\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useRef(null);\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const nodeTypes = useMemo(() => ({\n    customNode: CustomNode\n  }), []);\n  const fetchNode = async nodeId => {\n    try {\n      const res = await axios.get(`http://localhost:8000/api/node/${nodeId}`);\n      return res.data.node;\n    } catch (error) {\n      console.error('Error fetching node:', error);\n      return null;\n    }\n  };\n  const removeDescendants = parentId => {\n    const toRemove = new Set();\n    const stack = [parentId];\n    while (stack.length > 0) {\n      const current = stack.pop();\n\n      // Find all direct children of current node\n      const children = edgesRef.current.filter(e => e.source === current).map(e => e.target);\n      for (const childId of children) {\n        let otherParents = edgesRef.current.filter(e => e.target === childId && e.source !== current);\n        otherParents = otherParents.filter(par => {\n          let source = par.source;\n          while (true) {\n            const parentEdge = edgesRef.current.find(e => e.target === source);\n            if (!parentEdge) return true;\n            source = parentEdge.source;\n            if (source === current) return false;\n          }\n        });\n        if (otherParents.length === 0) {\n          stack.push(childId);\n          toRemove.add(childId);\n        }\n      }\n    }\n    newNodesRef.current = newNodesRef.current.filter(n => !toRemove.has(n.id));\n    edgesRef.current = edgesRef.current.filter(e => !toRemove.has(e.source) && !toRemove.has(e.target));\n    expandedNodesRef.current.delete(parentId);\n    newNodesRef.current = newNodesRef.current.map(n => n.id === parentId ? {\n      ...n,\n      data: {\n        ...n.data,\n        expanded: false\n      }\n    } : n);\n  };\n\n  // Helper function to compute bounding box of nodes by id list\n  const computeBounds = nodes => {\n    if (nodes.length === 0) return null;\n    let minX = nodes[0].position.x;\n    let minY = nodes[0].position.y;\n    let maxX = nodes[0].position.x;\n    let maxY = nodes[0].position.y;\n    nodes.forEach(({\n      position,\n      style\n    }) => {\n      var _style$width, _style$height;\n      const width = (_style$width = style === null || style === void 0 ? void 0 : style.width) !== null && _style$width !== void 0 ? _style$width : 180; // default width if not specified\n      const height = (_style$height = style === null || style === void 0 ? void 0 : style.height) !== null && _style$height !== void 0 ? _style$height : 80; // default height if not specified\n      minX = Math.min(minX, position.x);\n      minY = Math.min(minY, position.y);\n      maxX = Math.max(maxX, position.x + width);\n      maxY = Math.max(maxY, position.y + height);\n    });\n    return {\n      x: minX,\n      y: minY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  };\n  const handleDrill = useCallback(async nodeId => {\n    var _parentNode$position, _parentNode$position2;\n    const isExpanded = expandedNodesRef.current.has(nodeId);\n    if (isExpanded) {\n      removeDescendants(nodeId);\n      setNodes(newNodesRef.current);\n      setEdges(edgesRef.current);\n      return;\n    }\n    const node = await fetchNode(nodeId);\n    if (!node || !node.childrenData) return;\n    const reportName = node.reportName;\n    const nextLevel = parseInt(node.level) + 1 || level + 1;\n    const entries = Object.entries(node.childrenData);\n    const totalChildren = entries.length;\n    const parentNode = newNodesRef.current.find(n => n.id === nodeId);\n    const baseX = (parentNode === null || parentNode === void 0 ? void 0 : (_parentNode$position = parentNode.position) === null || _parentNode$position === void 0 ? void 0 : _parentNode$position.x) + 450 || 250;\n    const centerY = (parentNode === null || parentNode === void 0 ? void 0 : (_parentNode$position2 = parentNode.position) === null || _parentNode$position2 === void 0 ? void 0 : _parentNode$position2.y) || 0;\n    const verticalSpacing = 120;\n\n    // 1. Calculate initial startY to center children vertically on parent\n    let startY = 0;\n\n    // 2. Helper to get vertical bounds of the children group at a given startY\n    function groupBounds(yStart) {\n      const firstChildY = yStart;\n      const lastChildY = yStart + (totalChildren - 1) * verticalSpacing;\n      const nodeHeight = 80; // approx height for nodes\n      return {\n        top: firstChildY,\n        bottom: lastChildY + nodeHeight\n      };\n    }\n\n    // 3. Check if this vertical range overlaps any existing nodes\n    const existingNodes = newNodesRef.current;\n    function isOverlapping(yStart, yEnd) {\n      return existingNodes.some(({\n        position,\n        style\n      }) => {\n        var _style$height2;\n        const nodeHeight = (_style$height2 = style === null || style === void 0 ? void 0 : style.height) !== null && _style$height2 !== void 0 ? _style$height2 : 80;\n        const nodeYStart = position.y;\n        const nodeYEnd = nodeYStart + nodeHeight;\n        return !(yEnd < nodeYStart || yStart > nodeYEnd);\n      });\n    }\n\n    // 4. Shift down the whole children group if overlapping, keep parent fixed\n    let yOffset = 0;\n    while (isOverlapping(groupBounds(startY + yOffset).top, groupBounds(startY + yOffset).bottom)) {\n      yOffset += verticalSpacing;\n    }\n    startY += yOffset;\n\n    // 5. Add children nodes at calculated positions\n    entries.forEach(([childId, childLabel], index) => {\n      const childY = startY + index * verticalSpacing;\n      edgesRef.current.push({\n        id: `e-${nodeId}-${childId}`,\n        source: nodeId,\n        sourceHandle: 'a',\n        target: childId,\n        targetHandle: 'a'\n      });\n      newNodesRef.current.push({\n        id: childId,\n        type: 'customNode',\n        position: {\n          x: baseX,\n          y: childY\n        },\n        data: {\n          label: childLabel.label,\n          id: childId,\n          reportName: reportName,\n          hasChildren: childLabel.hasChildren,\n          childrenNum: childLabel.childrenNum,\n          expanded: false,\n          onDrill: () => handleDrill(childId)\n        }\n      });\n    });\n\n    // 6. Mark parent as expanded (but keep its position unchanged)\n    expandedNodesRef.current.add(nodeId);\n    newNodesRef.current = newNodesRef.current.map(n => n.id === nodeId ? {\n      ...n,\n      data: {\n        ...n.data,\n        expanded: true\n      }\n    } : n);\n\n    // 7. Deduplicate nodes and edges\n    const uniqueNodes = Array.from(new Map(newNodesRef.current.map(n => [n.id, n])).values());\n    const uniqueEdges = Array.from(new Map(edgesRef.current.map(e => [e.id, e])).values());\n    setNodes(uniqueNodes);\n    setEdges(uniqueEdges);\n    setLevel(nextLevel);\n\n    // 8. Fit view on the updated subtree\n    const subtreeNodeIds = [nodeId, ...entries.map(([childId]) => childId)];\n    const subtreeNodes = newNodesRef.current.filter(n => subtreeNodeIds.includes(n.id));\n    const bounds = computeBounds(subtreeNodes);\n    if (bounds && reactFlowInstance.current) {\n      reactFlowInstance.current.fitBounds(bounds, {\n        padding: 0.4,\n        maxZoom: 1.5\n      });\n    }\n  }, [level, reactFlowInstance]);\n  const onInit = useCallback(rfi => {\n    reactFlowInstance.current = rfi;\n  }, []);\n  const fitViewWithDelay = () => {\n    setTimeout(() => {\n      if (reactFlowInstance.current) {\n        reactFlowInstance.current.fitView({\n          padding: 0.2\n        });\n      }\n    }, 100);\n  };\n  useEffect(() => {\n    const loadRoot = async () => {\n      const root = await fetchNode('EC140');\n      if (!root) return;\n      const rootId = root.parentId || 'EC140';\n      newNodesRef.current.push({\n        id: rootId,\n        type: 'customNode',\n        position: {\n          x: 500,\n          y: 50\n        },\n        data: {\n          label: root.parentName || 'Root Node',\n          id: rootId,\n          reportName: root.reportName,\n          hasChildren: true,\n          childrenNum: Object.entries(root.childrenData).length,\n          expanded: false,\n          onDrill: () => handleDrill(rootId)\n        }\n      });\n      setNodes(newNodesRef.current);\n    };\n    loadRoot();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    ref: reactFlowWrapper,\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      nodeTypes: nodeTypes,\n      fitView: true,\n      fitViewOptions: {\n        padding: 0.4\n      },\n      onInit: onInit,\n      defaultEdgeOptions: defaultEdgeOptions,\n      children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 342,\n    columnNumber: 5\n  }, this);\n};\n_s(KPIDiagram, \"Arw5iXeEA9N2Y8TBBAbYA8S63Hc=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c3 = KPIDiagram;\nexport default KPIDiagram;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CustomNode$memo\");\n$RefreshReg$(_c2, \"CustomNode\");\n$RefreshReg$(_c3, \"KPIDiagram\");","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useRef","useState","memo","ReactFlow","Background","Controls","useNodesState","useReactFlow","useEdgesState","Handle","Position","axios","motion","jsxDEV","_jsxDEV","CustomNode","_c","data","div","initial","opacity","scale","animate","exit","transition","duration","style","backgroundColor","border","borderRadius","padding","width","boxShadow","fontFamily","position","children","type","Left","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","fontWeight","color","marginBottom","id","reportName","label","hasChildren","onClick","onDrill","bottom","right","background","cursor","expanded","childrenNum","Right","_c2","defaultEdgeOptions","KPIDiagram","_s","level","setLevel","newNodesRef","edgesRef","expandedNodesRef","Set","reactFlowWrapper","reactFlowInstance","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","nodeTypes","customNode","fetchNode","nodeId","res","get","node","error","console","removeDescendants","parentId","toRemove","stack","length","current","pop","filter","e","source","map","target","childId","otherParents","par","parentEdge","find","push","add","n","has","delete","computeBounds","minX","x","minY","y","maxX","maxY","forEach","_style$width","_style$height","height","Math","min","max","handleDrill","_parentNode$position","_parentNode$position2","isExpanded","childrenData","nextLevel","parseInt","entries","Object","totalChildren","parentNode","baseX","centerY","verticalSpacing","startY","groupBounds","yStart","firstChildY","lastChildY","nodeHeight","top","existingNodes","isOverlapping","yEnd","some","_style$height2","nodeYStart","nodeYEnd","yOffset","childLabel","index","childY","sourceHandle","targetHandle","uniqueNodes","Array","from","Map","values","uniqueEdges","subtreeNodeIds","subtreeNodes","includes","bounds","fitBounds","maxZoom","onInit","rfi","fitViewWithDelay","setTimeout","fitView","loadRoot","root","rootId","parentName","ref","fitViewOptions","_c3","$RefreshReg$"],"sources":["/Users/khalidabourkia/Desktop/diagram/client/src/components/KPIDiagram.jsx"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState , memo} from 'react';\nimport ReactFlow, {\n  Background,\n  Controls,\n  useNodesState,\n  useReactFlow, \n  useEdgesState,\n  Handle,\n  Position,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport axios from 'axios';\n\n// CustomNode component\n// import { motion, AnimatePresence } from 'framer-motion';\nimport { motion } from 'framer-motion';\n\nconst CustomNode = memo(({ data }) => {\n  // console.log(data);\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.98 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.98 }}\n      transition={{ duration: 0.2 }}\n      style={{\n        backgroundColor: '#ffffff',\n        border: '1px solid #e5e7eb', // gray-200\n        borderRadius: '12px',\n        padding: '16px',\n        width: 250,\n        boxShadow: '0px 1px 4px rgba(0, 0, 0, 0.05)',\n        fontFamily: 'Inter, sans-serif',\n        position: 'relative',\n      }}\n    >\n      <Handle type=\"target\" position={Position.Left} style={{ opacity: 0 }} />\n\n      {/* Status bar or tag */}\n      <div style={{\n        fontSize: 12,\n        fontWeight: 500,\n        color: '#2563eb',\n        marginBottom: 0\n      }}>\n        nodeID : {data.id}\n      </div>\n\n      {/* Title */}\n      <div style={{\n        fontSize: 12,\n        fontWeight: 500,\n        color: '#2563eb',\n        marginBottom: 4\n      }}>\n        reportName : {data.reportName}\n      </div>\n\n      {/* Example metric rows */}\n      <div style={{ fontSize: 16, color: '#374151' }}>\n        {data.label}\n      </div>\n\n      {/* Expand/collapse button */}\n      {data.hasChildren && (\n        <button\n          onClick={data.onDrill}\n          style={{\n            position: 'absolute',\n            bottom: 8,\n            right: 8,\n            fontSize: 14,\n            border: 'none',\n            borderRadius: '4px',\n            background: '#e0e7ff',\n            color: '#1d4ed8',\n            cursor: 'pointer',\n            padding: '2px 6px'\n          }}\n        >\n          {data.expanded ? 'âˆ’' : `${data.childrenNum}`}\n        </button>\n      )}\n\n      <Handle type=\"source\" position={Position.Right} style={{ opacity: 0 }} />\n    </motion.div>\n  );\n});\n\n\n\nconst defaultEdgeOptions = {\n  // animated: true,\n  type: 'smoothstep',\n};\n\nconst KPIDiagram = () => {\n  const [level, setLevel] = useState(0);\n  const newNodesRef = useRef([]);\n  const edgesRef = useRef([]);\n  const expandedNodesRef = useRef(new Set()); // Track expanded nodes\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useRef(null); \n\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n\n  const nodeTypes = useMemo(() => ({ customNode: CustomNode }), []);\n\n  const fetchNode = async (nodeId) => {\n    try {\n      const res = await axios.get(`http://localhost:8000/api/node/${nodeId}`);\n      return res.data.node;\n    } catch (error) {\n      console.error('Error fetching node:', error);\n      return null;\n    }\n  };\n  const removeDescendants = (parentId) => {\n    const toRemove = new Set();\n    \n    const stack = [parentId];\n    \n    while (stack.length > 0) {\n      const current = stack.pop();\n      \n      // Find all direct children of current node\n      const children = edgesRef.current\n      .filter(e => e.source === current)\n      .map(e => e.target);\n      \n      for (const childId of children) {\n        let otherParents = edgesRef.current.filter(\n          e => e.target === childId && e.source !== current\n        );\n        otherParents = otherParents.filter(par =>{\n          let source = par.source;\n          while(true)\n          {\n            const parentEdge = edgesRef.current.find(e => e.target === source);\n            if(!parentEdge)\n              return true;\n            source = parentEdge.source;\n            if(source === current)\n                return false;\n          }\n        })\n        if (otherParents.length === 0) {\n          stack.push(childId);\n          toRemove.add(childId);\n        }\n        \n      }\n    }\n    newNodesRef.current = newNodesRef.current.filter(n => !toRemove.has(n.id));\n    edgesRef.current = edgesRef.current.filter(\n      e => !toRemove.has(e.source) && !toRemove.has(e.target)\n    );\n  \n    expandedNodesRef.current.delete(parentId);\n\n    newNodesRef.current = newNodesRef.current.map(n =>\n      n.id === parentId ? { ...n, data: { ...n.data, expanded: false } } : n\n    );\n  };\n\n  // Helper function to compute bounding box of nodes by id list\n  const computeBounds = (nodes) => {\n    if (nodes.length === 0) return null;\n    let minX = nodes[0].position.x;\n    let minY = nodes[0].position.y;\n    let maxX = nodes[0].position.x;\n    let maxY = nodes[0].position.y;\n\n    nodes.forEach(({ position, style }) => {\n      const width = (style?.width ?? 180); // default width if not specified\n      const height = (style?.height ?? 80); // default height if not specified\n      minX = Math.min(minX, position.x);\n      minY = Math.min(minY, position.y);\n      maxX = Math.max(maxX, position.x + width);\n      maxY = Math.max(maxY, position.y + height);\n    });\n\n    return { x: minX, y: minY, width: maxX - minX, height: maxY - minY };\n  };\n\n  \n  const handleDrill = useCallback(\n    async (nodeId) => {\n      const isExpanded = expandedNodesRef.current.has(nodeId);\n  \n      if (isExpanded) {\n        removeDescendants(nodeId);\n        setNodes(newNodesRef.current);\n        setEdges(edgesRef.current);\n        return;\n      }\n  \n      const node = await fetchNode(nodeId);\n      if (!node || !node.childrenData) return;\n  \n      const reportName = node.reportName;\n      const nextLevel = parseInt(node.level) + 1 || level + 1;\n      const entries = Object.entries(node.childrenData);\n      const totalChildren = entries.length;\n  \n      const parentNode = newNodesRef.current.find((n) => n.id === nodeId);\n      const baseX = parentNode?.position?.x + 450 || 250;\n      const centerY = parentNode?.position?.y || 0;\n      const verticalSpacing = 120;\n  \n      // 1. Calculate initial startY to center children vertically on parent\n      let startY = 0;\n  \n      // 2. Helper to get vertical bounds of the children group at a given startY\n      function groupBounds(yStart) {\n        const firstChildY = yStart;\n        const lastChildY = yStart + (totalChildren - 1) * verticalSpacing;\n        const nodeHeight = 80; // approx height for nodes\n        return { top: firstChildY, bottom: lastChildY + nodeHeight };\n      }\n  \n      // 3. Check if this vertical range overlaps any existing nodes\n      const existingNodes = newNodesRef.current;\n      function isOverlapping(yStart, yEnd) {\n        return existingNodes.some(({ position, style }) => {\n          const nodeHeight = style?.height ?? 80;\n          const nodeYStart = position.y;\n          const nodeYEnd = nodeYStart + nodeHeight;\n          return !(yEnd < nodeYStart || yStart > nodeYEnd);\n        });\n      }\n  \n      // 4. Shift down the whole children group if overlapping, keep parent fixed\n      let yOffset = 0;\n      while (isOverlapping(groupBounds(startY + yOffset).top, groupBounds(startY + yOffset).bottom)) {\n        yOffset += verticalSpacing;\n      }\n      startY += yOffset;\n  \n      // 5. Add children nodes at calculated positions\n      entries.forEach(([childId, childLabel], index) => {\n        const childY = startY + index * verticalSpacing;\n  \n        edgesRef.current.push({\n          id: `e-${nodeId}-${childId}`,\n          source: nodeId,\n          sourceHandle: 'a',\n          target: childId,\n          targetHandle: 'a',\n        });\n  \n        newNodesRef.current.push({\n          id: childId,\n          type: 'customNode',\n          position: { x: baseX, y: childY },\n          data: {\n            label: childLabel.label,\n            id: childId,\n            reportName: reportName,\n            hasChildren: childLabel.hasChildren,\n            childrenNum: childLabel.childrenNum,\n            expanded: false,\n            onDrill: () => handleDrill(childId),\n          },\n        });\n      });\n  \n      // 6. Mark parent as expanded (but keep its position unchanged)\n      expandedNodesRef.current.add(nodeId);\n      newNodesRef.current = newNodesRef.current.map(n =>\n        n.id === nodeId\n          ? {\n              ...n,\n              data: { ...n.data, expanded: true },\n            }\n          : n\n      );\n  \n      // 7. Deduplicate nodes and edges\n      const uniqueNodes = Array.from(new Map(newNodesRef.current.map((n) => [n.id, n])).values());\n      const uniqueEdges = Array.from(new Map(edgesRef.current.map((e) => [e.id, e])).values());\n  \n      setNodes(uniqueNodes);\n      setEdges(uniqueEdges);\n      setLevel(nextLevel);\n  \n      // 8. Fit view on the updated subtree\n      const subtreeNodeIds = [nodeId, ...entries.map(([childId]) => childId)];\n      const subtreeNodes = newNodesRef.current.filter(n => subtreeNodeIds.includes(n.id));\n      const bounds = computeBounds(subtreeNodes);\n  \n      if (bounds && reactFlowInstance.current) {\n        reactFlowInstance.current.fitBounds(bounds, {\n          padding: 0.4,\n          maxZoom: 1.5,\n        });\n      }\n    },\n    [level, reactFlowInstance]\n  );\n  \n  const onInit = useCallback((rfi) => {\n    reactFlowInstance.current = rfi;\n  }, []);\n\n  const fitViewWithDelay = () => {\n    setTimeout(() => {\n      if (reactFlowInstance.current) {\n        reactFlowInstance.current.fitView({ padding: 0.2 });\n      }\n    }, 100);\n  };\n\n  useEffect(() => {\n    const loadRoot = async () => {\n      const root = await fetchNode('EC140');\n      if (!root) return;\n\n      const rootId = root.parentId || 'EC140';\n      newNodesRef.current.push({\n        id: rootId,\n        type: 'customNode',\n        position: { x: 500, y: 50 },\n        data: {\n          label: root.parentName || 'Root Node',\n          id: rootId,\n          reportName : root.reportName,\n          hasChildren: true,\n          childrenNum : Object.entries(root.childrenData).length,\n          expanded: false,\n          onDrill: () => handleDrill(rootId),\n        },\n      });\n\n      setNodes(newNodesRef.current);\n    };\n    loadRoot();\n  }, []);\n\n  return (\n    <div style={{ width: '100vw', height: '100vh' }} ref={reactFlowWrapper}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        nodeTypes={nodeTypes}\n        fitView\n        fitViewOptions={{ padding: 0.4 }}\n        onInit={onInit}\n        defaultEdgeOptions={defaultEdgeOptions}\n      >\n        <Background />\n        <Controls />\n      </ReactFlow>\n    </div>\n  );\n};\n\nexport default KPIDiagram;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}