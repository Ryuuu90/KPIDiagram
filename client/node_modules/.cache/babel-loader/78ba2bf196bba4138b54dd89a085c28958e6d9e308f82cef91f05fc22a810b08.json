{"ast":null,"code":"var _jsxFileName = \"/Users/khalidabourkia/Desktop/diagram/client/src/components/KPIDiagram.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport ReactFlow, { Background, Controls, useNodesState, useEdgesState, Handle, Position } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomNode = ({\n  data\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: '1px solid #ccc',\n      padding: '12px 16px',\n      borderRadius: 12,\n      background: '#fff',\n      boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\n      minWidth: 180,\n      maxWidth: 200,\n      textAlign: 'center',\n      fontSize: 14,\n      fontWeight: 500,\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Handle, {\n      type: \"target\",\n      position: Position.Top,\n      id: \"a\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 8\n      },\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), data.hasChildren && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: data.onDrill,\n      style: {\n        padding: '4px 8px',\n        fontSize: 12,\n        borderRadius: 6,\n        border: 'none',\n        background: '#007bff',\n        color: 'white',\n        cursor: 'pointer'\n      },\n      children: data.expanded ? '➖' : '➕'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Handle, {\n      type: \"source\",\n      position: Position.Bottom,\n      id: \"a\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_c = CustomNode;\nconst KPIDiagram = () => {\n  _s();\n  const [level, setLevel] = useState(0);\n  const newNodesRef = useRef([]);\n  const edgesRef = useRef([]);\n  const expandedNodesRef = useRef(new Set());\n\n  // Store all fetched nodes and edges to restore shared grandchildren\n  const allNodesMap = useRef(new Map());\n  const allEdgesMap = useRef(new Map());\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const nodeTypes = useMemo(() => ({\n    customNode: CustomNode\n  }), []);\n  const fetchNode = async nodeId => {\n    try {\n      const res = await axios.get(`http://localhost:8000/api/node/${nodeId}`);\n      return res.data.node;\n    } catch (error) {\n      console.error('Error fetching node:', error);\n      return null;\n    }\n  };\n  const removeDescendants = parentId => {\n    const toRemove = new Set();\n    const stack = [parentId];\n    while (stack.length > 0) {\n      const current = stack.pop();\n      const children = edgesRef.current.filter(e => e.source === current).map(e => e.target);\n      children.forEach(childId => {\n        if (!toRemove.has(childId)) {\n          stack.push(childId);\n          toRemove.add(childId);\n        }\n      });\n    }\n\n    // Remove descendant nodes from visible nodes\n    newNodesRef.current = newNodesRef.current.filter(n => !toRemove.has(n.id));\n    // Remove descendant edges from visible edges\n    edgesRef.current = edgesRef.current.filter(e => !toRemove.has(e.target) && !toRemove.has(e.source));\n\n    // Update expanded set\n    for (const id of toRemove) expandedNodesRef.current.delete(id);\n    expandedNodesRef.current.delete(parentId);\n\n    // Mark parent node as collapsed (expanded: false)\n    newNodesRef.current = newNodesRef.current.map(n => n.id === parentId ? {\n      ...n,\n      data: {\n        ...n.data,\n        expanded: false\n      }\n    } : n);\n  };\n  const handleDrill = useCallback(async nodeId => {\n    var _parentNode$position;\n    const isExpanded = expandedNodesRef.current.has(nodeId);\n    if (isExpanded) {\n      // Collapse descendants\n      removeDescendants(nodeId);\n      setNodes([...newNodesRef.current]);\n      setEdges([...edgesRef.current]);\n      return;\n    }\n\n    // Expand: fetch node children or restore from cache\n    const node = await fetchNode(nodeId);\n    if (!node || !node.childrenData) return;\n    const parentNode = newNodesRef.current.find(n => n.id === nodeId);\n    const nextLevel = parseInt(node.level) + 1 || level + 1;\n    const centerX = (parentNode === null || parentNode === void 0 ? void 0 : (_parentNode$position = parentNode.position) === null || _parentNode$position === void 0 ? void 0 : _parentNode$position.x) || 0;\n    const entries = Object.entries(node.childrenData);\n    const totalChildren = entries.length;\n    const baseY = 100 + nextLevel * 180;\n    const spacing = Math.max(200, 1200 / totalChildren);\n    const startX = centerX - (totalChildren - 1) * spacing / 2;\n    entries.forEach(([childId, childLabel], index) => {\n      const childX = startX + index * spacing;\n\n      // Check if node already fetched\n      let newNode = allNodesMap.current.get(childId);\n      if (!newNode) {\n        // Create new node\n        newNode = {\n          id: childId,\n          type: 'customNode',\n          position: {\n            x: childX,\n            y: baseY\n          },\n          data: {\n            label: childLabel.label,\n            id: childId,\n            hasChildren: childLabel.hasChildren,\n            expanded: expandedNodesRef.current.has(childId),\n            onDrill: () => handleDrill(childId)\n          }\n        };\n        allNodesMap.current.set(childId, newNode);\n      } else {\n        // Update position for current expansion (optional)\n        newNode = {\n          ...newNode,\n          position: {\n            x: childX,\n            y: baseY\n          }\n        };\n        allNodesMap.current.set(childId, newNode);\n      }\n\n      // Add or update edge\n      const edgeId = `e-${nodeId}-${childId}`;\n      let newEdge = allEdgesMap.current.get(edgeId);\n      if (!newEdge) {\n        newEdge = {\n          id: edgeId,\n          source: nodeId,\n          sourceHandle: 'a',\n          target: childId,\n          targetHandle: 'a',\n          animated: true\n        };\n        allEdgesMap.current.set(edgeId, newEdge);\n      }\n\n      // Add to visible lists if not already present\n      if (!newNodesRef.current.find(n => n.id === childId)) {\n        newNodesRef.current.push(newNode);\n      }\n      if (!edgesRef.current.find(e => e.id === newEdge.id)) {\n        edgesRef.current.push(newEdge);\n      }\n    });\n\n    // Remove duplicates (just in case)\n    const uniqueNodes = Array.from(new Map(newNodesRef.current.map(n => [n.id, n])).values());\n    const uniqueEdges = Array.from(new Map(edgesRef.current.map(e => [e.id, e])).values());\n    newNodesRef.current = uniqueNodes;\n    edgesRef.current = uniqueEdges;\n    expandedNodesRef.current.add(nodeId);\n\n    // Mark this node as expanded\n    newNodesRef.current = newNodesRef.current.map(n => n.id === nodeId ? {\n      ...n,\n      data: {\n        ...n.data,\n        expanded: true\n      }\n    } : n);\n    setNodes([...uniqueNodes]);\n    setEdges([...uniqueEdges]);\n    setLevel(nextLevel);\n  }, [level]);\n  useEffect(() => {\n    const loadRoot = async () => {\n      const root = await fetchNode('EC140');\n      if (!root) return;\n      const rootId = root.parentId || 'EC140';\n      const rootNode = {\n        id: rootId,\n        type: 'customNode',\n        position: {\n          x: 500,\n          y: 50\n        },\n        data: {\n          label: root.parentName || 'Root Node',\n          id: rootId,\n          hasChildren: true,\n          expanded: false,\n          onDrill: () => handleDrill(rootId)\n        }\n      };\n      newNodesRef.current = [rootNode];\n      allNodesMap.current.set(rootId, rootNode);\n      setNodes([...newNodesRef.current]);\n    };\n    loadRoot();\n  }, [handleDrill]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      nodeTypes: nodeTypes,\n      fitView: true,\n      fitViewOptions: {\n        padding: 0.4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n};\n_s(KPIDiagram, \"lCyy5WPiAnmmI6LS9xoRhH2C1PA=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c2 = KPIDiagram;\nexport default KPIDiagram;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomNode\");\n$RefreshReg$(_c2, \"KPIDiagram\");","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useRef","useState","ReactFlow","Background","Controls","useNodesState","useEdgesState","Handle","Position","axios","jsxDEV","_jsxDEV","CustomNode","data","style","border","padding","borderRadius","background","boxShadow","minWidth","maxWidth","textAlign","fontSize","fontWeight","position","children","type","Top","id","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","label","hasChildren","onClick","onDrill","color","cursor","expanded","Bottom","_c","KPIDiagram","_s","level","setLevel","newNodesRef","edgesRef","expandedNodesRef","Set","allNodesMap","Map","allEdgesMap","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","nodeTypes","customNode","fetchNode","nodeId","res","get","node","error","console","removeDescendants","parentId","toRemove","stack","length","current","pop","filter","e","source","map","target","forEach","childId","has","push","add","n","delete","handleDrill","_parentNode$position","isExpanded","childrenData","parentNode","find","nextLevel","parseInt","centerX","x","entries","Object","totalChildren","baseY","spacing","Math","max","startX","childLabel","index","childX","newNode","y","set","edgeId","newEdge","sourceHandle","targetHandle","animated","uniqueNodes","Array","from","values","uniqueEdges","loadRoot","root","rootId","rootNode","parentName","width","height","fitView","fitViewOptions","_c2","$RefreshReg$"],"sources":["/Users/khalidabourkia/Desktop/diagram/client/src/components/KPIDiagram.jsx"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport ReactFlow, {\n  Background,\n  Controls,\n  useNodesState,\n  useEdgesState,\n  Handle,\n  Position,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport axios from 'axios';\n\nconst CustomNode = ({ data }) => {\n  return (\n    <div\n      style={{\n        border: '1px solid #ccc',\n        padding: '12px 16px',\n        borderRadius: 12,\n        background: '#fff',\n        boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\n        minWidth: 180,\n        maxWidth: 200,\n        textAlign: 'center',\n        fontSize: 14,\n        fontWeight: 500,\n        position: 'relative',\n      }}\n    >\n      <Handle type=\"target\" position={Position.Top} id=\"a\" />\n      <div style={{ marginBottom: 8 }}>{data.label}</div>\n      {data.hasChildren && (\n        <button\n          onClick={data.onDrill}\n          style={{\n            padding: '4px 8px',\n            fontSize: 12,\n            borderRadius: 6,\n            border: 'none',\n            background: '#007bff',\n            color: 'white',\n            cursor: 'pointer',\n          }}\n        >\n          {data.expanded ? '➖' : '➕'}\n        </button>\n      )}\n      <Handle type=\"source\" position={Position.Bottom} id=\"a\" />\n    </div>\n  );\n};\n\nconst KPIDiagram = () => {\n  const [level, setLevel] = useState(0);\n  const newNodesRef = useRef([]);\n  const edgesRef = useRef([]);\n  const expandedNodesRef = useRef(new Set());\n\n  // Store all fetched nodes and edges to restore shared grandchildren\n  const allNodesMap = useRef(new Map());\n  const allEdgesMap = useRef(new Map());\n\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const nodeTypes = useMemo(() => ({ customNode: CustomNode }), []);\n\n  const fetchNode = async (nodeId) => {\n    try {\n      const res = await axios.get(`http://localhost:8000/api/node/${nodeId}`);\n      return res.data.node;\n    } catch (error) {\n      console.error('Error fetching node:', error);\n      return null;\n    }\n  };\n\n  const removeDescendants = (parentId) => {\n    const toRemove = new Set();\n    const stack = [parentId];\n\n    while (stack.length > 0) {\n      const current = stack.pop();\n\n      const children = edgesRef.current\n        .filter((e) => e.source === current)\n        .map((e) => e.target);\n\n      children.forEach((childId) => {\n        if (!toRemove.has(childId)) {\n          stack.push(childId);\n          toRemove.add(childId);\n        }\n      });\n    }\n\n    // Remove descendant nodes from visible nodes\n    newNodesRef.current = newNodesRef.current.filter((n) => !toRemove.has(n.id));\n    // Remove descendant edges from visible edges\n    edgesRef.current = edgesRef.current.filter(\n      (e) => !toRemove.has(e.target) && !toRemove.has(e.source)\n    );\n\n    // Update expanded set\n    for (const id of toRemove) expandedNodesRef.current.delete(id);\n    expandedNodesRef.current.delete(parentId);\n\n    // Mark parent node as collapsed (expanded: false)\n    newNodesRef.current = newNodesRef.current.map((n) =>\n      n.id === parentId ? { ...n, data: { ...n.data, expanded: false } } : n\n    );\n  };\n\n  const handleDrill = useCallback(\n    async (nodeId) => {\n      const isExpanded = expandedNodesRef.current.has(nodeId);\n\n      if (isExpanded) {\n        // Collapse descendants\n        removeDescendants(nodeId);\n        setNodes([...newNodesRef.current]);\n        setEdges([...edgesRef.current]);\n        return;\n      }\n\n      // Expand: fetch node children or restore from cache\n      const node = await fetchNode(nodeId);\n      if (!node || !node.childrenData) return;\n\n      const parentNode = newNodesRef.current.find((n) => n.id === nodeId);\n      const nextLevel = parseInt(node.level) + 1 || level + 1;\n      const centerX = parentNode?.position?.x || 0;\n\n      const entries = Object.entries(node.childrenData);\n      const totalChildren = entries.length;\n      const baseY = 100 + nextLevel * 180;\n      const spacing = Math.max(200, 1200 / totalChildren);\n      const startX = centerX - ((totalChildren - 1) * spacing) / 2;\n\n      entries.forEach(([childId, childLabel], index) => {\n        const childX = startX + index * spacing;\n\n        // Check if node already fetched\n        let newNode = allNodesMap.current.get(childId);\n        if (!newNode) {\n          // Create new node\n          newNode = {\n            id: childId,\n            type: 'customNode',\n            position: { x: childX, y: baseY },\n            data: {\n              label: childLabel.label,\n              id: childId,\n              hasChildren: childLabel.hasChildren,\n              expanded: expandedNodesRef.current.has(childId),\n              onDrill: () => handleDrill(childId),\n            },\n          };\n          allNodesMap.current.set(childId, newNode);\n        } else {\n          // Update position for current expansion (optional)\n          newNode = { ...newNode, position: { x: childX, y: baseY } };\n          allNodesMap.current.set(childId, newNode);\n        }\n\n        // Add or update edge\n        const edgeId = `e-${nodeId}-${childId}`;\n        let newEdge = allEdgesMap.current.get(edgeId);\n        if (!newEdge) {\n          newEdge = {\n            id: edgeId,\n            source: nodeId,\n            sourceHandle: 'a',\n            target: childId,\n            targetHandle: 'a',\n            animated: true,\n          };\n          allEdgesMap.current.set(edgeId, newEdge);\n        }\n\n        // Add to visible lists if not already present\n        if (!newNodesRef.current.find((n) => n.id === childId)) {\n          newNodesRef.current.push(newNode);\n        }\n        if (!edgesRef.current.find((e) => e.id === newEdge.id)) {\n          edgesRef.current.push(newEdge);\n        }\n      });\n\n      // Remove duplicates (just in case)\n      const uniqueNodes = Array.from(\n        new Map(newNodesRef.current.map((n) => [n.id, n])).values()\n      );\n      const uniqueEdges = Array.from(\n        new Map(edgesRef.current.map((e) => [e.id, e])).values()\n      );\n\n      newNodesRef.current = uniqueNodes;\n      edgesRef.current = uniqueEdges;\n      expandedNodesRef.current.add(nodeId);\n\n      // Mark this node as expanded\n      newNodesRef.current = newNodesRef.current.map((n) =>\n        n.id === nodeId ? { ...n, data: { ...n.data, expanded: true } } : n\n      );\n\n      setNodes([...uniqueNodes]);\n      setEdges([...uniqueEdges]);\n      setLevel(nextLevel);\n    },\n    [level]\n  );\n\n  useEffect(() => {\n    const loadRoot = async () => {\n      const root = await fetchNode('EC140');\n      if (!root) return;\n\n      const rootId = root.parentId || 'EC140';\n      const rootNode = {\n        id: rootId,\n        type: 'customNode',\n        position: { x: 500, y: 50 },\n        data: {\n          label: root.parentName || 'Root Node',\n          id: rootId,\n          hasChildren: true,\n          expanded: false,\n          onDrill: () => handleDrill(rootId),\n        },\n      };\n\n      newNodesRef.current = [rootNode];\n      allNodesMap.current.set(rootId, rootNode);\n\n      setNodes([...newNodesRef.current]);\n    };\n\n    loadRoot();\n  }, [handleDrill]);\n\n  return (\n    <div style={{ width: '100vw', height: '100vh' }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        nodeTypes={nodeTypes}\n        fitView\n        fitViewOptions={{ padding: 0.4 }}\n      >\n        <Background />\n        <Controls />\n      </ReactFlow>\n    </div>\n  );\n};\n\nexport default KPIDiagram;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}